# Generated by Django 3.2.11 on 2024-03-13 03:21

from calendar import c
from datetime import date
from django.db import migrations

from teleband.courses.helper import assign_piece_plan
from teleband.assignments.models import PiecePlan as PiecePlanModel
from teleband.courses.models import Course as CourseModel

DEMO_USERS = [
    "demomike",
    "demodave",
    "demoalden",
]
NEA_CREATE_DEMO_PIECES = [
    "Freedom 2040 (Band)",
    "Freedom 2040 (Orchestra)",
    "Down by the Riverside",
    "Deep River",
    "I Want to be Ready"
]

NEA_CONDITIONS = ['Aural', 'Theoretical', 'Exploratory']

def add_demos(apps, schema_editor):
    Course = apps.get_model("courses", "Course")
    Enrollment = apps.get_model("courses", "Enrollment")
    Instrument = apps.get_model("instruments", "Instrument")
    Piece = apps.get_model("musics", "Piece")
    PiecePlan = apps.get_model("assignments", "PiecePlan")
    Role = apps.get_model("users", "Role")
    User = apps.get_model("users", "User")

    owner=User.objects.get(username=DEMO_USERS[0])
    student_role = Role.objects.get(name="Student")

    for condition in NEA_CONDITIONS:
        demo_course, cc = Course.objects.update_or_create(
            name=f"{condition} Demo as Student",
            owner=owner,
            start_date=date(2024, 3, 13),
            end_date=date(2024, 7, 13),
            slug=f"{condition.lower()}-demo-as-student",
        )

        for demo_username in DEMO_USERS:
            user = User.objects.get(username=demo_username)
            if user.instrument is None:
                user.instrument = Instrument.objects.get(name="Piano")
                user.save()
            Enrollment.objects.update_or_create(
                user=user,
                course=demo_course,
                instrument=user.instrument,
                role=student_role,
            )

        for piece_name in NEA_CREATE_DEMO_PIECES:
            if piece_name=="I Want to be Ready" and condition != 'Aural':
                pass
            
            piece = Piece.objects.get(name=piece_name)
            piece_plan, p_created = PiecePlan.objects.update_or_create(
                name=f"NEA-{piece.name}-{condition}",
                piece=piece,
            )
            # FIXME: is this bad news because I end up getting ahistorical models involved?
            ppo = PiecePlanModel.objects.get(id=piece_plan.id)
            co = CourseModel.objects.get(id=demo_course.id)
            assign_piece_plan(co, ppo)


class Migration(migrations.Migration):

    dependencies = [
        ('assignments', '0032_auto_20240311_1235'),
        ('users', '0007_user_instrument'),
    ]

    operations = [
        migrations.RunPython(add_demos, migrations.RunPython.noop),
    ]
